###########################################################
## THIS IS A CONFIGURATION FILE FOR THE ASIA DIR PARSER  ##
## --> Below are the options (1) - (5) for this script.  ##
##     The functions are executed in this order.         ##
## --> The options can be changed accordingly.           ##
## --> Each option can be activated by setting           ##
##     function.* TRUE or FALSE                          ##
###########################################################

###########################################################
### (0) GENERAL CONFIGURATION
# (Log level can be INFO, WARN, ERROR)
log.level = WARN
# (File the log output gets saved to)
log.output = out.log
### END (0)
###########################################################

###########################################################
### (1) UPDATE A PLACES FILE
# Execute the function
function.updatePlaces = FALSE
# File to update
updatePlaces.file.in  = res/places_in.tsv
# Output file (do not specify an file ending, it will be generated)
updatePlaces.file.out = res/places_out
# File type for output (TSV, JSON, ALL)
updatePlaces.output.type = ALL
# Does the input file have a header line? (TRUE, FALSE)
updatePlaces.hasHeaders = TRUE
# Does the input file have a an id column (first column)? (TRUE, FALSE)
updatePlaces.hasIdColumn = FALSE
# Should the geo data be updated (through tgn id)? (TRUE, FALSE)
updatePlaces.updateGeoData = TRUE
# Should the geo data be updated even if it's already there? (TRUE, FALSE)
updatePlaces.forceReloadGeoData = FALSE
# Should the output file saved in alphabetical order? (TRUE, FALSE)
updatePlaces.sortByPlaceNames = TRUE
# Also save filtered lists (incomplete and complete entries)? (TRUE, FALSE)
updatePlaces.saveFilteredLists = TRUE
### END (1)
###########################################################

###########################################################
### (2) CHECK INTEGRITY OF PLACE FILE
# Execute the function
function.checkIntegrity = FALSE
# File to check
checkIntegrity.file.in  = res/places_in.tsv
# Does the input file have a header line? (TRUE, FALSE)
checkIntegrity.hasHeaders = TRUE
# Does the input file have a an id column (first column)? (TRUE, FALSE)
checkIntegrity.hasIdColumn = FALSE
### END (2)
###########################################################

###########################################################
### (3) ADD PERSONS TO PLACES 
# Execute the function
function.processPersonsFile = FALSE
# File to check
processPersonsFile.placesFile.in  = res/places_in.tsv
# Does the place input file have a header line? (TRUE, FALSE)
processPersonsFile.hasHeaders = TRUE
# Does the place input file have a an id column (first column)? (TRUE, FALSE)
processPersonsFile.hasIdColumn = FALSE
# The persons file to read
processPersonsFile.personsFile.in = res/persons_1896.tsv
# The places file to write
processPersonsFile.personsFile.out = res/placesWithPersons_1896.tsv
### END (3)
###########################################################

###########################################################
### (4) ADD PERSONS TO GROUPS 
# Execute the function
function.processPersonsFileToGroup = FALSE
# File to check
processPersonsFileToGroup.placesFile.in  = res/places_in.tsv
processPersonsFileToGroup.groupsFile.in  = res/groups.tsv
# Does the place input file have a header line? (TRUE, FALSE)
processPersonsFileToGroup.hasHeaders = TRUE
# Does the place input file have a an id column (first column)? (TRUE, FALSE)
processPersonsFileToGroup.hasIdColumn = FALSE
# The persons file to read
processPersonsFileToGroup.personsFile.in = res/persons_1896.tsv
# The places file to write
processPersonsFileToGroup.personsFile.out = res/placesInGroupsWithPersons_1896.tsv
### END (4)
###########################################################

###########################################################
### (5) GET UNRECKOGNIZED PLACES FROM PERSONS FILE 
# Execute the function
function.showUnreckognizedPlaces = FALSE
# File to check
showUnreckognizedPlaces.placesFile.in  = res/places_in.tsv
# Does the place input file have a header line? (TRUE, FALSE)
showUnreckognizedPlaces.hasHeaders = TRUE
# Does the place input file have a an id column (first column)? (TRUE, FALSE)
showUnreckognizedPlaces.hasIdColumn = FALSE
# The persons file with the unreckognized names
showUnreckognizedPlaces.personsFile.in  = res/persons_1896.tsv
### END (5)
###########################################################

###########################################################
### (6) CREATE HTML RENDER OF PLACES WITH PERSONS 
# Execute the function
function.createPlacesHtmlRender = TRUE
# File to check
createPlacesHtmlRender.placesFile.in  = res/places_in.tsv
# Does the place input file have a header line? (TRUE, FALSE)
createPlacesHtmlRender.hasHeaders = TRUE
# Does the place input file have a an id column (first column)? (TRUE, FALSE)
createPlacesHtmlRender.hasIdColumn = FALSE
# The persons file
createPlacesHtmlRender.personsFile.in  = res/persons_1896.tsv
# Base folder to store the htmlRender to
createPlacesHtmlRender.outFolder = res/htmlPersons1896
createPlacesHtmlRender.html.title = Persons in 1899
### END (6)
###########################################################

###########################################################
### (7) ADD PERSONS TO SHIPS
# Execute the function
function.processPersonsForShipsFile = FALSE
# File to check
processPersonsForShipsFile.shipsFile.in  = res/ships_in.tsv
# Does the place input file have a header line? (TRUE, FALSE)
processPersonsForShipsFile.hasHeaders = TRUE
# Does the place input file have a an id column (first column)? (TRUE, FALSE)
processPersonsForShipsFile.hasIdColumn = FALSE
# The persons file to read
processPersonsForShipsFile.personsFile.in = res/persons_1896.tsv
# The places file to write
processPersonsForShipsFile.personsFile.out = res/placesWithPersonsOnShips_1896.tsv
### END (7)
###########################################################